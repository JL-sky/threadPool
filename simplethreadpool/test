class ThreadPool {
private:
  class ThreadWorker {//内置线程工作类
  private:
    int m_id; //工作id
    ThreadPool * m_pool;//所属线程池
  public:
    ThreadWorker(ThreadPool * pool, const int id) 
      : m_pool(pool), m_id(id) {
    }
    void operator()() {
      std::function<void()> func; //定义基础函数类func
      bool dequeued; //是否正在取出队列中元素
      while (!m_pool->m_shutdown) {
        {
          std::unique_lock<std::mutex> lock(m_pool->m_conditional_mutex);
          if (m_pool->m_queue.empty()) {
            m_pool->m_conditional_lock.wait(lock); //等待条件变量通知，开启线程
          }
          dequeued = m_pool->m_queue.dequeue(func);
        }
        if (dequeued) {
          func();
        }
      }
    }
  };
  bool m_shutdown; //线程池是否关闭
  SafeQueue<std::function<void()>> m_queue;//执行函数安全队列，即任务队列
  std::vector<std::thread> m_threads; //工作线程队列
  std::mutex m_conditional_mutex;//线程休眠锁互斥变量
  std::condition_variable m_conditional_lock; //线程环境锁，让线程可以处于休眠或者唤醒状态
public:
  ThreadPool(const int n_threads)
    : m_threads(std::vector<std::thread>(n_threads)), m_shutdown(false) {
  }
  ThreadPool(const ThreadPool &) = delete; //拷贝构造函数，并且取消默认父类构造函数
  ThreadPool(ThreadPool &&) = delete; // 拷贝构造函数，允许右值引用
  ThreadPool & operator=(const ThreadPool &) = delete; // 赋值操作
  ThreadPool & operator=(ThreadPool &&) = delete; //赋值操作
  void init() {
    for (int i = 0; i < m_threads.size(); ++i) {
      m_threads[i] = std::thread(ThreadWorker(this, i));//分配工作线程

    }
  }
  void shutdown() {
    m_shutdown = true;
    m_conditional_lock.notify_all(); //通知 唤醒所有工作线程
    for (int i = 0; i < m_threads.size(); ++i) {
      if(m_threads[i].joinable()) { //判断线程是否正在等待
        m_threads[i].join();  //将线程加入等待队列
      }
    }
  }
  template<typename F, typename...Args>
  auto submit(F&& f, Args&&... args) -> std::future<decltype(f(args...))> {
    std::function<decltype(f(args...))()> func = std::bind(std::forward<F>(f), std::forward<Args>(args)...);//连接函数和参数定义，特殊函数类型,避免左、右值错误
    auto task_ptr = std::make_shared<std::packaged_task<decltype(f(args...))()>>(func);
    std::function<void()> wrapper_func = [task_ptr]() {
      (*task_ptr)(); 
    };
    m_queue.enqueue(wrapper_func);
    m_conditional_lock.notify_one();
    return task_ptr->get_future();
  }
};